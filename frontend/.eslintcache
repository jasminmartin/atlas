[{"/Users/jmn57/Development/bucks/dissertation/zettlekasten/frontend/src/App.tsx":"1","/Users/jmn57/Development/bucks/dissertation/zettlekasten/frontend/src/app/sections/Graph.tsx":"2","/Users/jmn57/Development/bucks/dissertation/zettlekasten/frontend/src/index.tsx":"3","/Users/jmn57/Development/bucks/dissertation/zettlekasten/frontend/src/reportWebVitals.ts":"4","/Users/jmn57/Development/bucks/dissertation/zettlekasten/frontend/src/app/sections/useFileFetch.tsx":"5"},{"size":891,"mtime":1614957247039,"results":"6","hashOfConfig":"7"},{"size":2676,"mtime":1615564682116,"results":"8","hashOfConfig":"7"},{"size":501,"mtime":1613156877321,"results":"9","hashOfConfig":"7"},{"size":421,"mtime":1613156877401,"results":"10","hashOfConfig":"7"},{"size":640,"mtime":1615564582217,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"1ka16cn",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"/Users/jmn57/Development/bucks/dissertation/zettlekasten/frontend/src/App.tsx",["25","26","27","28"],"import React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport Graph, { Node, Edge } from './app/sections/Graph';\n\nconst baseURL = \"http://localhost:4024\"\n\ntype ServerEdge = {\n  firstNode: string\n  secondNode: string\n}\n\ntype ServerGraph = {\n  edges: Array<ServerEdge>\n  nodes: Array<string>\n}\n\ninterface AppProps { }\n\nfunction App({ }: AppProps) {\n\n  const [graph, setGraph] = useState<ServerGraph>({\n    nodes: [],\n    edges: [],\n  })\n\n\n  useEffect(() => {\n    async function f(): Promise<void> {\n      const resp = await fetch(`${baseURL}/local-link`)\n      const body = await resp.json()\n      setGraph(body)\n    }\n    f()\n  }, [baseURL, setGraph])\n\n\n  return <Graph nodes={graph.nodes.map(name => ({ id: name, label: name, width: 100, height: 100 }))} edges={graph.edges.map(edge => ({\n    from: edge.firstNode,\n    to: edge.secondNode,\n  }))} />;\n}\n\nexport default App;\n","/Users/jmn57/Development/bucks/dissertation/zettlekasten/frontend/src/app/sections/Graph.tsx",["29"],"import dagre from 'dagre';\nimport useFileFetch from \"./useFileFetch\"\nimport React, { useEffect, useState } from \"react\";\n\ntype NodeId = string;\n\nexport interface Node {\n  id: NodeId;\n  label: string;\n  width?: number,\n  height?: number,\n}\n\nexport interface Edge {\n  from: NodeId;\n  to: NodeId;\n}\n\nfunction buildGraph(g: dagre.graphlib.Graph, nodes: Node[], edges: Edge[]) {\n  // Set an object for the graph label\n  g.setGraph({});\n\n  // Default to assigning a new object as a label for each new edge.\n  g.setDefaultEdgeLabel(function () {\n    return {};\n  });\n\n  // Add nodes to the graph. The first argument is the node id. The second is\n  // metadata about the node. In this case we're going to add labels to each of\n  // our nodes.\n  nodes.forEach((node) => g.setNode(node.id, node));\n  edges.forEach((edge) => g.setEdge(edge.from, edge.to));\n\n  dagre.layout(g);\n\n  return g;\n}\n\ntype GraphProps = {\n  nodes: Node[];\n  edges: Edge[];\n};\n\ntype FileBodyProps = {\n  fileName: string\n}\n\nconst Loading = () => <p>Loading...</p>\n\nconst FileBody = ({ fileName }: FileBodyProps) => {\n  const { body, isPending } = useFileFetch(fileName)\n  return isPending ? (<Loading />) : <p>{JSON.stringify(body)}</p>\n}\n\nexport const Graph = ({ nodes, edges }: GraphProps) => {\n  const currentGraph = new dagre.graphlib.Graph();\n\n  buildGraph(currentGraph, nodes, edges);\n  const nodeWidth = 100\n  const nodePadding = 8\n\n  const [lastClicked, setLastClicked] = useState<string | undefined>(undefined)\n\n  return (\n    <>\n      <svg viewBox=\"0 0 1000 1000\">\n        {currentGraph.edges().map((edge) => {\n          console.dir(edge);\n          const fromNode = currentGraph.node(edge.v);\n          const toNode = currentGraph.node(edge.w);\n          return (\n            <line\n              x1={fromNode.x}\n              y1={fromNode.y}\n              x2={toNode.x}\n              y2={toNode.y}\n              stroke=\"black\"\n            />\n          );\n        })}\n        {currentGraph\n          .nodes()\n          .map((id) => currentGraph.node(id))\n          .map((node) => (\n            <>\n              <circle\n                style={{ fill: \"pink\" }}\n                // onClick={() => FileBody(node.label || \"\")}\n                onClick={() => setLastClicked(node.label)}\n                cx={node.x}\n                cy={node.y}\n                r={nodeWidth / 2}>\n              </circle>\n              <text textLength={nodeWidth - nodePadding * 2} x={node.x - (nodeWidth / 2) + nodePadding} y={node.y}>\n                {node.label}\n              </text>\n\n            </>\n          ))}\n      </svg>\n      {lastClicked && <FileBody fileName={lastClicked} />}\n    </>\n  );\n};\n\nexport default Graph;\n","/Users/jmn57/Development/bucks/dissertation/zettlekasten/frontend/src/index.tsx",[],"/Users/jmn57/Development/bucks/dissertation/zettlekasten/frontend/src/reportWebVitals.ts",[],"/Users/jmn57/Development/bucks/dissertation/zettlekasten/frontend/src/app/sections/useFileFetch.tsx",["30","31","32"],"import React, { useEffect, useState } from \"react\";\n\nconst baseURL = \"http://localhost:4024\"\n\ntype Body = {\n    name: string\n    body: string\n}\n\nfunction useFileFetch(fileName: string) {\n\n    const [body, setBody] = useState<Body | undefined>(undefined)\n\n    useEffect(() => {\n        async function f(file: string): Promise<void> {\n            const resp = await fetch(`${baseURL}/file-body/${file}`)\n            const body = await resp.json()\n            setBody(body)\n        }\n        f(fileName)\n    }, [fileName, baseURL, setBody])\n\n    return {\n        body,\n        isPending: body == undefined\n    }\n}\nexport default useFileFetch;\n",{"ruleId":"33","severity":1,"message":"34","line":3,"column":17,"nodeType":"35","messageId":"36","endLine":3,"endColumn":21},{"ruleId":"33","severity":1,"message":"37","line":3,"column":23,"nodeType":"35","messageId":"36","endLine":3,"endColumn":27},{"ruleId":"38","severity":1,"message":"39","line":19,"column":14,"nodeType":"40","messageId":"41","endLine":19,"endColumn":27},{"ruleId":"42","severity":1,"message":"43","line":34,"column":6,"nodeType":"44","endLine":34,"endColumn":25,"suggestions":"45"},{"ruleId":"33","severity":1,"message":"46","line":3,"column":17,"nodeType":"35","messageId":"36","endLine":3,"endColumn":26},{"ruleId":"33","severity":1,"message":"47","line":1,"column":8,"nodeType":"35","messageId":"36","endLine":1,"endColumn":13},{"ruleId":"42","severity":1,"message":"43","line":21,"column":8,"nodeType":"44","endLine":21,"endColumn":36,"suggestions":"48"},{"ruleId":"49","severity":1,"message":"50","line":25,"column":25,"nodeType":"51","messageId":"41","endLine":25,"endColumn":27},"@typescript-eslint/no-unused-vars","'Node' is defined but never used.","Identifier","unusedVar","'Edge' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has an unnecessary dependency: 'baseURL'. Either exclude it or remove the dependency array. Outer scope values like 'baseURL' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["52"],"'useEffect' is defined but never used.","'React' is defined but never used.",["53"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression",{"desc":"54","fix":"55"},{"desc":"56","fix":"57"},"Update the dependencies array to be: [setGraph]",{"range":"58","text":"59"},"Update the dependencies array to be: [fileName, setBody]",{"range":"60","text":"61"},[647,666],"[setGraph]",[508,536],"[fileName, setBody]"]